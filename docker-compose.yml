version: '3'
services:
  zookeeper:
    container_name: miniclip_zookeeper
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  miniclip_kafka:
    container_name: miniclip_kafka
    hostname: miniclip_kafka
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: miniclip_zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9101
      KAFKA_ADVERTISED_LISTENERS: INSIDE://miniclip_kafka:9092,OUTSIDE://localhost:9101
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  schema-registry:
    container_name: schema-registry
    hostname: schema-registry
    image: confluentinc/cp-schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://miniclip_kafka:9092'
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - zookeeper
      - miniclip_kafka

  mock-data:
    container_name: miniclip_mock_data
    build: ./mock-data # Dockerfile in the mock-data directory
    environment:
      KAFKA_BROKERS: "miniclip_kafka:9092"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
    depends_on:
      - miniclip_kafka
      - schema-registry

  kafka-data-quality:
    container_name: kafka_data_quality
    build: ./kafka-data-quality # Dockerfile in the kafka-data-quality directory
    environment:
      KAFKA_BROKERS: "miniclip_kafka:9092"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
    depends_on:
      - miniclip_kafka
      - schema-registry

  spark-master:
    container_name: spark-master
    image: bitnami/spark:3.2.4
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"

  spark-worker:
    container_name: spark-worker
    image: bitnami/spark:3.2.4
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
    depends_on:
      - spark-master

  spark-daily-aggregation:
    build:
      context: ./spark-daily-aggregation
      dockerfile: Dockerfile
    depends_on:
      - spark-master
      - spark-worker
      - miniclip_kafka
      - schema-registry
      - mongodb
    environment:
      APP_NAME: SparkDailyAggregation
      MASTER_URL: spark://spark-master:7077
      KAFKA_BROKERS: "miniclip_kafka:9092"
      KAFKA_INIT_TOPIC: "init_validated"
      MONGO_URI: "mongodb://root:example@mongodb:27017"
      MONGO_DB: "timeseriesAggregations"
      MONGO_COLLECTION: "dailyUserAggregations"

  spark-minute-aggregation:
    build:
      context: ./spark-minute-aggregation
      dockerfile: Dockerfile
    depends_on:
      - spark-master
      - spark-worker
      - miniclip_kafka
      - schema-registry
      - mongodb
    environment:
      APP_NAME: SparkMinuteAggregation
      MASTER_URL: spark://spark-master:7077
      KAFKA_BROKERS: "miniclip_kafka:9092"
      KAFKA_INIT_TOPIC: "init_validated"
      MONGO_URI: "mongodb://root:example@mongodb:27017"
      MONGO_DB: "timeseriesAggregations"
      MONGO_COLLECTION: "minuteUserAggregations"

  mongodb:
    container_name: mongodb
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

volumes:
  mongodb_data: